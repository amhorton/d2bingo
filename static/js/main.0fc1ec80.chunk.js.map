{"version":3,"sources":["util/bingoLogic.tsx","util/objectives.ts","components/BingoCard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["rows","columns","Array","from","keys","map","num","r","allBingos","detectBingo","numbers","some","bingo","every","includes","objectives","SpaceStatus","getDefaultState","arr","shuffle","slice","number","objective","status","NEUTRAL","getBingoStatus","spaces","completeSpacesByNumber","filter","space","COMPLETE","oppoCompleteSpacesByNumber","OPP_COMPLETE","hasBingo","oppoHasBingo","hasAllKill","length","hasQuorum","oppoHasQuorum","CardContainer","styled","div","CardWrapper","Space","props","Subtitle","h3","BingoCard","useState","setSpaces","console","log","onSpaceClick","currentSpace","newStatus","newSpace","Object","assign","newSpaces","onClick","Global","createGlobalStyle","Wrapper","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0fc1ec80.chunk.js","sourcesContent":["const rows = [\n  [0,1,2,3,4],\n  [5,6,7,8,9],\n  [10,11,12,13,14],\n  [15,16,17,18,19],\n  [20,21,22,23,24],\n]\n\nconst columns = Array.from(Array(5).keys()).map(num => rows.map(r => r[num]))\n\nconst diagonals = [\n  [0,6,12,18,24],\n  [4,8,12,16,20],\n]\n\nconst allBingos = [\n  ...rows,\n  ...columns,\n  ...diagonals,\n]\n\nexport function detectBingo (numbers: number[]) {\n  return allBingos.some(bingo => bingo.every(num => numbers.includes(num)))\n}","import shuffle from 'lodash.shuffle';\n\nexport const objectives = [\n  \"Proc outlaw on a raid or strike boss\",\n  \"One player has the same perk in every weapon slot\",\n  \"Every player has an exotic armor piece\",\n  \"Any weekly emblem tracker at exactly 69\",\n  \"Complete tower jumping puzzle\",\n  \"Multi-person emote with an opponent in Gambit or Crucible\",\n  \"Half-banked medal\",\n  \"Complete a strike with zero kills\",\n  \"One-phase any dungeon boss\",\n  \"One player has weapons with the same frame name in every slot\",\n  \"Defeat Shuro Chi\",\n  \"Complete Presage\",\n  \"Complete a raid encounter in Festival of the Lost masks\",\n  \"Have exactly 420 parallax trajectory\",\n  \"100k nightfall\",\n  \"\\\"Operation Babydog\\\" or \\\"Fireteam Piccolo\\\"\",\n  \"Any player in any instance has Sunshot equipped\",\n  \"Get a pike into the basement of Crypt Security\",\n  \"Any new weapon with Rampage\",\n  \"Complete a heroic public event on four different destinations\",\n  \"Obtain an exotic kinetic weapon\",\n  \"Dismantle two Prime Engrams\",\n  \"Win a game in the Trials or Competitive playlists\",\n  \"Complete a Wrathborn Hunt\",\n  \"Obtain and use the Scanner Augment in the Europan Eclipsed zone\",\n  \"Defeat the final boss of any raid\",\n  \"Complete the Chamber of Suffering\",\n  \"Earn an Ascendant Shard\",\n  \"Complete one entire phase of the Riven encounter\",\n  \"Complete every lost sector on a destination\",\n  \"Complete the Master and Legend difficulty lost sectors\",\n  \"Complete battlegrounds with matching elements in heavy, energy, and subclass\",\n  \"Gild the weekly tracker for Shattered Realm completion time\",\n  \"Defeat Vorgeth and Morgeth\",\n  \"\\\"Guardians make their own fate\\\"\",\n  \"Complete the weekly challenge in any raid\",\n  \"Complete every daily bounty on a single destination\",\n  \"Complete the final tier of Altars of Sorrow\",\n  \"Kill two Champions with one shot or ability\",\n  \"Complete the Deep Stone Crypt spacewalk\",\n];\n\nexport function getObjectiveSet (): string[] {\n  return shuffle(objectives).slice(0, 25);\n}\n\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { detectBingo } from \"../util/bingoLogic\";\nimport { getObjectiveSet } from \"../util/objectives\";\n\nenum SpaceStatus {\n  NEUTRAL = \"Neutral\",\n  COMPLETE = \"Complete\",\n  OPP_COMPLETE = \"OpponentComplete\",\n}\n\ntype SpaceState = {\n  number: number;\n  objective: string;\n  status: SpaceStatus;\n};\n\ntype SpaceCustomProps = {\n  status: SpaceStatus;\n};\n\nfunction getDefaultState(): SpaceState[] {\n  const arr = Array.from(Array(25).keys());\n  const objectives = getObjectiveSet();\n\n  return arr.map((num) => ({\n    number: num,\n    objective: objectives[num],\n    status: SpaceStatus.NEUTRAL,\n  }));\n}\n\nfunction getBingoStatus(spaces: SpaceState[]) {\n  const completeSpacesByNumber = spaces\n    .filter((space) => space.status === SpaceStatus.COMPLETE)\n    .map((space) => space.number);\n  const oppoCompleteSpacesByNumber = spaces\n    .filter((space) => space.status === SpaceStatus.OPP_COMPLETE)\n    .map((space) => space.number);\n\n  const hasBingo = detectBingo(completeSpacesByNumber);\n  const oppoHasBingo = detectBingo(oppoCompleteSpacesByNumber);\n  const hasAllKill = completeSpacesByNumber.length === 25;\n  const hasQuorum = completeSpacesByNumber.length >= 13;\n  const oppoHasQuorum = oppoCompleteSpacesByNumber.length >= 13;\n\n  if (hasAllKill) return \"ALL KILL!\";\n  if (hasQuorum) return \"Majority!\";\n  if (oppoHasQuorum) return \"Opponent majority!\";\n  if (hasBingo) return \"Bingo!\";\n  if (oppoHasBingo) return \"Opponent Bingo!\";\n\n  return \"Still very much in play.\";\n}\n\nfunction getNextStatus(status: SpaceStatus): SpaceStatus {\n  if (status === SpaceStatus.NEUTRAL) return SpaceStatus.COMPLETE;\n  if (status === SpaceStatus.COMPLETE) return SpaceStatus.OPP_COMPLETE;\n  if (status === SpaceStatus.OPP_COMPLETE) return SpaceStatus.NEUTRAL;\n\n  return SpaceStatus.NEUTRAL;\n}\n\nconst getBackgroundColorFromProps = (props: SpaceCustomProps): string => {\n  const status = props.status;\n\n  if (status === SpaceStatus.NEUTRAL) return \"peachpuff\";\n  if (status === SpaceStatus.COMPLETE) return \"mediumseagreen\";\n  if (status === SpaceStatus.OPP_COMPLETE) return \"pink\";\n\n  return \"peachpuff\";\n};\n\nconst CardContainer = styled.div`\n  margin: 40px 0;\n`;\n\nconst CardWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(5, 20%);\n  grid-template-rows: repeat(5, 20%);\n  background-color: black;\n\n  border: 2px solid black;\n  width: 600px;\n  height: 600px;\n`;\n\nconst Space = styled.div<SpaceCustomProps>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: ${getBackgroundColorFromProps};\n  height: 100%;\n  width: 100%;\n  text-align: center;\n\n  :hover {\n    filter: brightness(85%);\n  }\n`;\n\nconst Subtitle = styled.h3``;\n\nfunction BingoCard() {\n  const [spaces, setSpaces] = useState(getDefaultState());\n\n  console.log(spaces);\n\n  const onSpaceClick = (num: number) => {\n    const currentSpace = spaces[num];\n    const newStatus = getNextStatus(currentSpace.status);\n\n    const newSpace = Object.assign({}, currentSpace, { status: newStatus });\n\n    const newSpaces = [...spaces];\n    newSpaces[num] = newSpace;\n\n    setSpaces(newSpaces);\n  };\n\n  return (\n    <>\n      <CardContainer>\n        <CardWrapper>\n          {spaces.map((space) => (\n            <Space\n              status={space.status}\n              onClick={() => onSpaceClick(space.number)}\n            >\n              {space.objective}\n            </Space>\n          ))}\n        </CardWrapper>\n      </CardContainer>\n      <Subtitle>Bingo status: {getBingoStatus(spaces)}</Subtitle>\n    </>\n  );\n}\n\nexport default BingoCard;\n","import React from 'react';\nimport styled, { createGlobalStyle} from 'styled-components';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport BingoCard from './components/BingoCard';\n\nconst Global = createGlobalStyle`\n  body {\n    background-color: peachpuff;\n  }\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nfunction App() {\n  return (\n    <Wrapper>\n      <Global />\n      <h1>Destiny 2 Bingo (Beyond Light Edition)</h1>\n      <BingoCard />\n    </Wrapper>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}